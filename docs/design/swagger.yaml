openapi: 3.0.1
info:
  title: POC DevOps JAVA
  description: The POC DevOps Java aims to be a proof of concept for the DevOps implementation on Java microservices buildt with Spring boot libraries.
  termsOfService: https://www.more.info/about/termsAndConditions
  contact:
    name: support
    url: https://www.more.info/about/
    email: write@to.me
  license:
    name: MyLicense 1.0
    url: https://www.more.info/about/license
  version: 0.0.1
externalDocs:
  description: SpringShop Wiki Documentation
  url: https://springshop.wiki.github.org/docs
servers:
  - url: http://localhost:8080
    description: Generated server url
paths:
  /scientist:
    get:
      tags:
        - scientist-controller
      summary: Retrieves all scientists.
      operationId: get
      responses:
        '200':
          description: OK
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ScientistResponse'
        '400':
          description: 'The request is not valid.<table><tbody>  <tr><td><center><strong>errorCode</strong></center></td><td><center><strong>errorMessage</strong></center></td></tr><tr><td><center>000.001</center></td><td><center>Invalid input: the field [${fieldName}] ${issue}</center></td></tr></tbody></table>'
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
    post:
      tags:
        - scientist-controller
      summary: Post a new scientist.
      description: This is an API that adds a new scientist to the datasource.
      operationId: post
      parameters:
        - name: myheader
          in: header
          required: false
          schema:
            type: string
        - name: myParam
          in: query
          required: false
          schema:
            type: string
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Scientist'
        required: true
      responses:
        '201':
          description: Created
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScientistResponse'
        '400':
          description: 'The request is not valid.<table><tbody>  <tr><td><center><strong>errorCode</strong></center></td><td><center><strong>errorMessage</strong></center></td></tr><tr><td><center>000.001</center></td><td><center>Invalid input: the field [${fieldName}] ${issue}</center></td></tr></tbody></table>'
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
  /scientist/{name}:
    get:
      tags:
        - scientist-controller
      summary: Retrieves the scientist with the requested name.
      description: The name must be mapped with an available scientist.
      operationId: get_1
      parameters:
        - name: name
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ScientistResponse'
        '400':
          description: 'The request is not valid.<table><tbody>  <tr><td><center><strong>errorCode</strong></center></td><td><center><strong>errorMessage</strong></center></td></tr><tr><td><center>000.001</center></td><td><center>Invalid input: the field [${fieldName}] ${issue}</center></td></tr></tbody></table>'
          content:
            '*/*':
              schema:
                $ref: '#/components/schemas/ErrorResponse'
components:
  schemas:
    Error:
      required:
        - errorCode
        - errorMessage
      type: object
      properties:
        field:
          type: string
          description: The name of the field involved in the validation.
          example: name
        errorCode:
          type: string
          description: Error code.
          example: '000.001'
        errorMessage:
          type: string
          description: Error message.
          example: 'Invalid input: the field [name] must not be blank'
      description: List of errors.
    ErrorResponse:
      required:
        - errors
      type: object
      properties:
        errors:
          type: array
          description: List of errors.
          items:
            $ref: '#/components/schemas/Error'
    Scientist:
      required:
        - name
      type: object
      properties:
        uuid:
          type: string
          description: Alphanumeric identifier associated to the scientist.
          example: a123b4c5-de6f-7890-gh9i-j87k6lm5nop4
        name:
          type: string
          description: Name of the scientist.
          example: Marie Salomea Sk≈Çodowska Curie
        numberOfNobels:
          minimum: 0
          type: integer
          description: Number of Nobel prizes.
          format: int64
          example: 2
        creationDate:
          type: string
          description: Creation date.
          format: date-time
          example: '1903-11-12T01:23:45.678Z'
        updateDate:
          type: string
          description: Update date.
          format: date-time
          example: '1903-11-12T01:23:45.678Z'
    ScientistResponse:
      type: object
      properties:
        scientists:
          type: array
          description: List of scientists.
          items:
            $ref: '#/components/schemas/Scientist'
